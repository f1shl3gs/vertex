[package]
name = "vertex"
version = "0.1.0"
authors = ["f1shl3gs"]
edition = "2024"
description = "A lightweight and ultra-fast tool for building observability pipelines"
repository = "https://github.com/f1shl3gs/vertex"
publish = false
rust-version = "1.89"
exclude = [ "tests/node" ]

# Optimized for binary size, and it will take alot time
[profile.minimal]
inherits = "release"
debug = false
strip = true
lto = "fat"
codegen-units = 1
# This option will increase a lot CPU
# opt-level = "z"

# This profile optimizes for runtime performance and small binary size at the expense of longer
# build times. It's most suitable for final release builds.
[profile.release]
debug = false
lto = "thin"

# This profile optimizes for short build times at the expense of larger binary size and slower
# runtime performance.
[profile.dev]
lto = false
incremental = true

[profile.bench]
debug = true

[workspace]
members = [
    "lib/backoff",
    "lib/buffer",
    "lib/codecs",
    "lib/configurable",
    "lib/configurable-derive",
    "lib/event",
    "lib/finalize",
    "lib/framework",
    "lib/hostname",
    "lib/hyper-unix",
    "lib/jaeger",
    "lib/kubernetes",
    "lib/log_schema",
    "lib/metrics",
    "lib/ntp",
    "lib/prometheus",
    "lib/resolver",
    "lib/tail",
    "lib/testify",
    "lib/tracing-internal",
    "lib/tracing-limit",
    "lib/tripwire",
    "lib/typesize",
    "lib/value",
    "lib/virt",
    "lib/vtl",
]

[features]
default = [
    # "snmalloc",

    "extensions",
    "sources",
    "transforms",
    "sinks",
]

target-x86_64-unknown-linux-musl = [
    # The default allocator of musl will consume more cpu than jemalloc.
    "scudo",

    "extensions",
    "sinks",
    "sources",
    "transforms",
]

target-x86_64-unknown-linux-gnu = [
    "extensions",
    "sinks",
    "sources",
    "transforms",
]

# Integration tests
clickhouse-integration-tests = []
consul-integration-tests = []
dnstap-integration-tests = []
elasticsearch-integration-tests = []
fluent-integration-tests = []
haproxy-integration-tests = []
kafka-integration-tests = []
loki-integration-tests = []
memcached-integration-tests = []
mysql-integration-tests = []
nginx_stub-integration-tests = []
ntp-integration-tests = []
prometheus_exporter_integration-tests = []
prometheus_remote_write_integration-tests = []
prometheus_scrape_integration-tests = []
pulsar_integration-tests = []
redfish-integration-tests = []
redis-integration-tests = []
zookeeper-integration-tests = []

all-integration-tests = [
    "consul-integration-tests",
    "elasticsearch-integration-tests",
    "haproxy-integration-tests",
    "kafka-integration-tests",
    "memcached-integration-tests",
    "mysql-integration-tests",
    "nginx_stub-integration-tests",
    "ntp-integration-tests",
    "prometheus_exporter_integration-tests",
    "prometheus_remote_write_integration-tests",
    "prometheus_scrape_integration-tests",
    "pulsar_integration-tests",
    "dnstap-integration-tests",
    "loki-integration-tests",
    "redis-integration-tests",
    "zookeeper-integration-tests",
    "clickhouse-integration-tests",
    "fluent-integration-tests",
    "redfish-integration-tests",
]

extensions-consul_observer = []
extensions-dns_observer = ["dep:resolver"]
extensions-exec_observer = ["tokio/process"]
extensions-healthcheck = ["tonic/router", "dep:tonic-health"]
extensions-http_observer = []
extensions-kubernetes_observer = ["dep:kubernetes"]
extensions-port_observer = []
extensions-pprof = ["dep:pprof"]
extensions-zpages = ["dep:parking_lot"]

# Extensions
extensions = [
    "extensions-consul_observer",
    "extensions-dns_observer",
    "extensions-exec_observer",
    "extensions-healthcheck",
    "extensions-http_observer",
    "extensions-kubernetes_observer",
    "extensions-port_observer",
    # Musl does not provide "pthread_getname_np" in current release.
    # https://github.com/tikv/pprof-rs/issues/41
    "extensions-pprof",
    "extensions-zpages"
]

# Sources
sources-audit = []
sources-bind = ["dep:quick-xml"]
sources-chrony = []
sources-clickhouse_metrics = []
sources-consul = []
sources-dnsmasq = ["dep:resolver"]
sources-dnstap = []
sources-docker = ["dep:hyper-unix"]
sources-dpdk = []
sources-exec = ["tokio/process"]
sources-elasticsearch = []
sources-filestats = []
sources-fluent = ["dep:flate2"]
sources-generate = []
sources-grpc_check = ["tonic/channel", "dep:tonic-health"]
sources-haproxy = []
sources-http = []
sources-http_check = ["dep:httpdate"]
sources-internal_logs = []
sources-internal_metrics = []
sources-internal_traces = []
sources-jaeger = ["dep:jaeger", "tonic/server", "tonic/router"]
sources-journald = ["tokio/fs", "tokio/process"]
sources-kafka = ["dep:rskafka", "dep:async-stream"]
sources-kafka_metrics = ["dep:rskafka"]
sources-kmsg = ["tokio/fs"]
sources-kubernetes_logs = ["dep:tail", "dep:kubernetes"]
sources-kubernetes_events = ["dep:kubernetes"]
sources-libvirt = ["dep:virt", "dep:quick-xml"]
sources-memcached = []
sources-mongodb = []
sources-mqtt = []
sources-multiplier = []
sources-mysqld = ["dep:sqlx"]
sources-nats_metrics = []
sources-netflow = ["dep:parking_lot"]
sources-nginx_stub = []
sources-node = []
sources-ntp = ["dep:ntp"]
sources-nvidia = ["tokio/process"]
sources-ping = ["dep:socket2", "dep:parking_lot"]
sources-podman = ["dep:hyper-unix"]
sources-prometheus_pushgateway = ["dep:base64", "dep:prometheus"]
sources-prometheus_scrape = ["dep:prometheus"]
sources-prometheus_remote_write = ["dep:snap", "dep:prometheus"]
sources-prometheus_textfile = ["dep:prometheus"]
sources-pulsar = ["dep:finalize", "dep:pulsar"]
sources-redfish = []
sources-redis = []
sources-selfstat = []
sources-sflow = []
sources-socket = []
sources-static_metrics = []
sources-syslog = ["codecs/syslog"]
sources-systemd = []
sources-tail = ["dep:tail", "dep:encoding_rs", "dep:finalize"]
sources-zookeeper = []

sources = [
    "sources-audit",
    "sources-bind",
    "sources-chrony",
    "sources-consul",
    "sources-clickhouse_metrics",
    "sources-generate",
    "sources-dnsmasq",
    "sources-dnstap",
    "sources-docker",
    "sources-dpdk",
    "sources-elasticsearch",
    "sources-exec",
    "sources-filestats",
    "sources-fluent",
    "sources-grpc_check",
    "sources-haproxy",
    "sources-http",
    "sources-http_check",
    "sources-internal_logs",
    "sources-internal_metrics",
    "sources-internal_traces",
    "sources-jaeger",
    "sources-journald",
    "sources-kafka",
    "sources-kafka_metrics",
    "sources-kmsg",
    "sources-kubernetes_events",
    "sources-kubernetes_logs",
    "sources-libvirt",
    "sources-memcached",
    "sources-mongodb",
    "sources-mqtt",
    "sources-multiplier",
    "sources-mysqld",
    "sources-nats_metrics",
    "sources-netflow",
    "sources-nginx_stub",
    "sources-node",
    "sources-ntp",
    "sources-nvidia",
    "sources-ping",
    "sources-podman",
    "sources-prometheus_pushgateway",
    "sources-prometheus_scrape",
    "sources-prometheus_remote_write",
    "sources-prometheus_textfile",
    "sources-pulsar",
    "sources-redfish",
    "sources-redis",
    "sources-selfstat",
    "sources-sflow",
    "sources-socket",
    "sources-static_metrics",
    "sources-syslog",
    "sources-systemd",
    "sources-tail",
    "sources-zookeeper",
]

transforms-cardinality = ["dep:dashmap", "dep:sbbf"]
transforms-dedup = ["dep:lru", "dep:parking_lot"]
transforms-filter = []
transforms-geoip = ["dep:maxminddb"]
transforms-metricalize = ["dep:async-stream"]
transforms-relabel = ["dep:md-5"]
transforms-rewrite = []
transforms-route = []
transforms-sample = []
transforms-throttle = ["dep:gcra", "dep:async-stream"]

# transforms
transforms = [
    "transforms-cardinality",
    "transforms-dedup",
    "transforms-filter",
    "transforms-geoip",
    "transforms-metricalize",
    "transforms-relabel",
    "transforms-rewrite",
    "transforms-route",
    "transforms-sample",
    "transforms-throttle"
]

# Sinks
sinks-blackhole = []
sinks-clickhouse = []
sinks-console = ["tokio/io-std"]
sinks-elasticsearch = []
sinks-http = []
sinks-influxdb = []
sinks-jaeger = ["dep:jaeger"]
sinks-kafka = ["dep:rskafka", "dep:parking_lot"]
sinks-loki = ["dep:snap"]
sinks-prometheus_exporter = ["dep:flate2", "dep:parking_lot", "dep:prometheus"]
sinks-prometheus_remote_write = ["dep:snap", "dep:prometheus"]
sinks-skywalking = ["tonic/gzip", "tonic/zstd", "tonic/transport", "tonic/codegen", "dep:tonic-prost"]
sinks-socket = []

sinks = [
    "sinks-blackhole",
    "sinks-clickhouse",
    "sinks-console",
    "sinks-elasticsearch",
    "sinks-http",
    "sinks-influxdb",
    "sinks-jaeger",
    "sinks-kafka",
    "sinks-loki",
    "sinks-prometheus_exporter",
    "sinks-prometheus_remote_write",
    "sinks-skywalking",
    "sinks-socket",
]

# Common
tokio-console = ["framework/tokio-console", "tokio/tracing"]

# Allocator
# mimalloc is an optional dependecy, and the feature `mimalloc` is created by default. So no
# need to declare it again.
jemalloc = [
    "dep:tikv-jemallocator",
    "tikv-jemalloc-ctl/stats",
    "tikv-jemalloc-ctl/profiling"
]
snmalloc = [ "dep:snmalloc-rs" ]

[[bench]]
name = "loki"
harness = false
path = "benches/loki.rs"
required-features = ["sinks-loki"]

[[bench]]
name = "hwmon_gather"
harness = false
path = "benches/node_source_hwmon.rs"
required-features = ["sources-node"]

[[bench]]
name = "haproxy"
harness = false
path = "benches/haproxy.rs"
required-features = ["sources-haproxy"]

[[test]]
name = "socket"
required-features = ["sinks-socket"]

[[test]]
name = "syslog"
required-features = ["sinks-socket"]

[build-dependencies]
prost-build = { version = "0.14.1", default-features = false }
tonic-prost-build = { version = "0.14.2", default-features = false, features = ["transport"] }

[dev-dependencies]
base64 = { version = "0.22.1", default-features = false }
buffer = { path = "lib/buffer" }
criterion = { version = "0.7.0", default-features = false, features = ["async_tokio"] }
event = { path = "lib/event", features = ["test"] }
framework = { path = "lib/framework", features = ["test-util"] }
serde_path_to_error = { version = "0.1.20", default-features = false }
testify = { path = "lib/testify" }
tokio = { version = "1.48.0", default-features = false, features = ["test-util"] }
tonic = { version = "0.14.2", default-features = false, features = ["server", "router"]}

[dependencies]
# Workspaces
codecs = { path = "lib/codecs" }
configurable = { path = "lib/configurable" }
event = { path = "lib/event" }
finalize = { path = "lib/finalize", optional = true }
framework = { path = "lib/framework" }
hostname = { path = "lib/hostname" }
humanize = { git = "https://github.com/f1shl3gs/humanize", default-features = false, features = ["bytes", "serde"], rev = "4b4d047d031337cc77a7d3637f9c6215098f9949" }
jaeger = { path = "lib/jaeger", optional = true }
kubernetes = { path = "lib/kubernetes", optional = true }
log_schema = { path = "lib/log_schema" }
metrics = { path = "lib/metrics" }
ntp = { path = "lib/ntp", optional = true }
prometheus = { path = "lib/prometheus", optional = true }
resolver = { path = "lib/resolver", optional = true }
tail = { path = "lib/tail", optional = true }
tripwire = { path = "lib/tripwire" }
typesize = { path = "lib/typesize" }
value = { path = "lib/value" }
virt = { path = "lib/virt", optional = true }
vtl = { path = "lib/vtl" }

# Allocators
mimalloc = { version = "0.1.48", default-features = false, optional = true }
scudo = { git = "https://github.com/google/rust-scudo", rev = "0b2d15e4dce43c9dea1de55c5cf746130cb0849b", optional = true }
snmalloc-rs = { version = "0.3.8", optional = true, default-features = false, features = ["build_cc"] }
tikv-jemallocator = { version = "0.6.1", optional = true, features = ["unprefixed_malloc_on_supported_platforms"] }
tikv-jemalloc-ctl = { version = "0.6.1", optional = true, features = ["use_std"] }

# Futrures & Tokio
async-stream = { version = "0.3.6", optional = true }
async-trait = { version = "0.1.89", default-features = false }
futures = { version = "0.3.31", default-features = false }
tokio = { version = "1.48.0", default-features = false, features = ["time", "net", "signal", "rt-multi-thread", "io-util"] }
tokio-util = { version = "0.7.16", default-features = false, features = ["codec", "time", "net"] }

# Tracing
tracing = { version = "0.1.41", default-features = false }

# HTTP
headers = { version = "0.4.1", default-features = false }
hyper = { version = "1.7.0", default-features = false, features = ["server"] }
hyper-rustls = { version = "0.27.7", default-features = false, features = ["rustls-native-certs"] }
hyper-util = { version = "0.1.17", default-features = false, features = ["client"] }
http = { version = "1.3.1", default-features = false }
httpdate = { version = "1.0.3", default-features = false, optional = true }
http-body-util = { version = "0.1.3", default-features = false }

# TLS
rustls = { version = "0.23.34", default-features = false, features = ["ring"] }

# Tower
tower = { version = "0.5.2", default-features = false }

# Serde
serde = { version = "1.0.228", default-features = false, features = ["derive"] }
serde_yaml = { version = "0.9.34", default-features = false }
serde_json = { version = "1.0.145", default-features = false }

# GRPC & Protobuf
prost = { version = "0.14.1", default-features = false, features = ["std"] }
prost-types = { version = "0.14.1", default-features = false }
tonic = { version = "0.14.2", default-features = false, optional = true, features = ["transport"] }
tonic-prost = { version = "0.14.2", default-features = false, optional = true }
tonic-health = { version = "0.14.2", default-features = false, optional = true }

# Profile
pprof = { version = "0.15.0", default-features = false, optional = true, features = ["flamegraph", "prost-codec"] }

# Cli
argh = { version = "0.1.13", default-features = false, features = ["help"] }

# External libs
base64 = { version = "0.22.1", default-features = false, optional = true }
bytes = { version = "1.10.1", default-features = false }
chrono = { version = "0.4.42", default-features = false }
dashmap = { version = "6.1.0", default-features = false, optional = true }
encoding_rs = { version = "0.8.35", optional = true, features = ["serde"] }
exitcode = { version = "1.1.2" }
flate2 = { version = "1.1.4", optional = true }
gcra = { git = "https://github.com/f1shl3gs/gcra.git", rev = "c4011e32aa408947decf812dd6fa2eee7492be16", optional = true }
glob = { version = "0.3.3", default-features = false }
hyper-unix = { path = "lib/hyper-unix", optional = true }
indexmap = { version = "2.12.0", default-features = false, features = ["serde"] }
inventory = { version = "0.3.21", default-features = false }
libc = { version = "0.2.177", default-features = false }
lru = { version = "0.16.2", default-features = false, optional = true }
maxminddb = { git = "https://github.com/f1shl3gs/maxminddb.git", rev = "eb9a6d1861cfe7313589c0e0281ddbb660a88962", optional = true, features = ["mmap", "unsafe-str"] }
md-5 = { version = "0.10.6", default-features = false, optional = true }
parking_lot = { version = "0.12.5", default-features = false, optional = true }
percent-encoding = { version = "2.3.2", default-features = false }
pulsar = { git = "https://github.com/f1shl3gs/pulsar-rs", rev = "bab5d791bb64f9e19d53eef242b8b33c96e836d0", default-features = false, optional = true, features = ["auth-oauth2", "compression", "tokio-rustls-runtime"] }
quick-xml = { version = "0.38.3", default-features = false, features = ["serialize"], optional = true }
rand = { version = "0.9.2", default-features = false }
regex = { version = "1.12.2", default-features = false }
rskafka = { git = "https://github.com/f1shl3gs/rskafka", rev = "c18c924934f3d0edf8e442212fa595f81c20d027", optional = true, features = ["transport-tls"] }
sbbf = { git = "https://github.com/f1shl3gs/sbbf.git", rev = "d619ab889a9637dd849206568a3023dee7046a8f", optional = true }
snap = { version = "1.1.1", default-features = false, optional = true }
socket2 = { version = "0.6.1", optional = true, default-features = false}
sqlx = { version = "0.8.6", default-features = false, optional = true, features = ["mysql", "runtime-tokio-rustls", "macros"] }
thiserror = { version = "2.0.17", default-features = false }
typetag = { version = "0.2.21" }
url = { version = "2.5.7", default-features = false, features = ["serde"] }
