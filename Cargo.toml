[package]
name = "vertex"
version = "0.1.0"
authors = ["f1shl3gs"]
edition = "2021"
repository = "https://github.com/f1shl3gs/vertex"

exclude = [
    "tests/fixtures"
]

# This profile optimizes for runtime performance and small binary size at the expense of longer
# build times. It's most suitable for final release builds.
[profile.release]
debug = false
lto = "thin"

# This profile optimizes for short build times at the expense of larger binary size and slower
# runtime performance.
[profile.dev]
lto = false
incremental = true

[profile.bench]
debug = true

[workspace]
members = [
    "lib/buffers",
    "lib/codecs",
    "lib/condition",
    "lib/event",
    "lib/framework",
    "lib/multiline",
    "lib/serde_regex",
    "lib/metrics",
    "lib/prometheus",
    "lib/testify",
    "lib/tail",
    "lib/log_schema",
    "lib/tracing-limit",
    "lib/humanize",
    "lib/sysinfo",
    "lib/virt",
    "lib/jaeger",
    "lib/tracing-internal",
    # tools
    "tools/fake_node_exporter"
]

[features]

benches = [
    "sources-syslog",
    "sinks-loki"
]

default = [
    # "tokio-console",
    # common
    "disk-buffer",
    "sources",
    "transforms",
    "sinks",
    # extensions
    "extensions-pprof",
    "extensions-healthcheck",
]

target-x86_64-unknown-linux-musl = [
    "disk-buffer",
    "extensions",
    "sinks",
    "sources",
    "transforms",
    "unix",
]

target-x86_64-unknown-linux-gnu = [
    "disk-buffer",
    "extensions",
    "sinks",
    "sources",
    "transforms",
    "unix",
    "extensions-pprof"
]

# Integration tests
all-integration-tests = [
    "integration-tests-consul",
    "integration-tests-elasticsearch",
    "integration-tests-haproxy",
    "integration-tests-kafka",
    "integration-tests-loki",
    "integration-tests-memcached",
    "integration-tests-mysql",
    "integration-tests-nginx_stub",
    "integration-tests-ntp",
    "integration-tests-prometheus_exporter",
    "integration-tests-prometheus_remote_write",
    "integration-tests-prometheus_scrape",
    "integration-tests-redis",
    "integration-tests-zookeeper"
]

integration-tests-consul = []
integration-tests-elasticsearch = []
integration-tests-haproxy = []
integration-tests-kafka = []
integration-tests-loki = []
integration-tests-memcached = []
integration-tests-mysql = []
integration-tests-nginx_stub = []
integration-tests-ntp = []
integration-tests-prometheus_exporter = []
integration-tests-prometheus_remote_write = []
integration-tests-prometheus_scrape = []
integration-tests-redis = []
integration-tests-zookeeper = []

# Common
disk-buffer = []
tokio-console = ["framework/tokio-console", "tokio/tracing"]

# Allocator
# mimalloc is an optional dependecy, and the feature `mimalloc` is created by default. So no
# need to declare it again.
jemalloc = ["tikv-jemallocator", "tikv-jemalloc-ctl", "tikv-jemalloc-sys"]

# Sources
sources = [
    "sources-bind",
    "sources-consul",
    "sources-demo_logs",
    "sources-elasticsearch",
    "sources-exec",
    "sources-haproxy",
    "sources-internal_logs",
    "sources-internal_metrics",
    "sources-internal_traces",
    "sources-jaeger",
    "sources-journald",
    "sources-kafka",
    "sources-kmsg",
    "sources-kubernetes_events",
    "sources-kubernetes_logs",
    "sources-libvirt",
    "sources-memcached",
    "sources-mongodb",
    "sources-mysqld",
    "sources-nginx_stub",
    "sources-node_metrics",
    "sources-ntp",
    "sources-nvidia_smi",
    "sources-prometheus_scrape",
    "sources-prometheus_remote_write",
    "sources-pulsar",
    "sources-redis",
    "sources-selfstat",
    "sources-syslog",
    "sources-tail",
    "sources-zookeeper",
]

sources-bind = []
sources-consul = []
sources-demo_logs = []
sources-exec = ["tokio/process"]
sources-elasticsearch = []
sources-haproxy = []
sources-internal_logs = []
sources-internal_metrics = []
sources-internal_traces = ["tracing-subscriber"]
sources-jaeger = ["jaeger", "tonic"]
sources-journald = []
sources-kafka = ["rdkafka-cmake", "async-stream"]
sources-kmsg = []
sources-kubernetes_logs = ["tail", "multiline", "kubernetes", "ahash", "parking_lot"]
sources-kubernetes_events = ["kubernetes"]
sources-libvirt = ["virt"]
sources-memcached = []
sources-mongodb = []
sources-mysqld = ["sqlx"]
sources-nginx_stub = []
sources-node_metrics = ["libc", "netlink-packet-sock-diag", "netlink-sys"]
sources-ntp = ["rsntp/tokio", "rsntp/async"]
sources-nvidia_smi = ["serde-xml-rs"]
sources-pulsar = []
sources-prometheus_scrape = ["prometheus"]
sources-prometheus_remote_write = ["snap"]
sources-redis = ["redis"]
sources-selfstat = ["libc"]
sources-syslog = ["codecs/syslog", "sources-utils-tcp-keepalive", "sources-utils-tcp-socket", "tls-utils", "smallvec"]
sources-tail = ["tail", "multiline", "encoding_rs"]
sources-zookeeper = []

# transforms
transforms = [
    "transforms-add_tags",
    "transforms-add_fields",
    "transforms-cardinality",
    "transforms-coercer",
    "transforms-dedup",
    "transforms-enum",
    "transforms-filter",
    "transforms-geoip",
    "transforms-metricalize",
    "transforms-route",
    "transforms-sample",
    "transforms-substr",
    "transforms-throttle"
]
transforms-add_tags = []
transforms-add_fields = []
transforms-cardinality = ["bloom"]
transforms-coercer = []
transforms-dedup = ["lru"]
transforms-enum = []
transforms-filter = ["condition"]
transforms-geoip = [ "maxminddb" ]
transforms-metricalize = ["async-stream"]
transforms-route = ["condition"]
transforms-sample = ["seahash"]
transforms-substr = []
transforms-throttle = ["governor"]

# sinks
sinks = [
    "sinks-blackhole",
    "sinks-clickhouse",
    "sinks-console",
    "sinks-elasticsearch",
    "sinks-jaeger",
    "sinks-kafka",
    "sinks-loki",
    "sinks-prometheus_exporter",
    "sinks-prometheus_remote_write",
    "sinks-pulsar",
    "sinks-socket",
    "sinks-vertex",
]

sinks-console = []
sinks-prometheus_exporter = ["flate2"]
sinks-prometheus_remote_write = ["snap"]
sinks-blackhole = []
sinks-kafka = ["rdkafka-cmake"]
sinks-jaeger = ["jaeger"]
sinks-pulsar = []
sinks-elasticsearch = []
sinks-loki = ["snap"]
sinks-vertex = []
sinks-clickhouse = []
sinks-socket = []

# extensions
extensions = [
    "extensions-healthcheck",
    # Musl does not provide "pthread_getname_np" in current release.
    # https://github.com/tikv/pprof-rs/issues/41
    # "extensions-pprof"
]

extensions-pprof = ["pprof/flamegraph"]
extensions-jemalloc = ["tikv-jemallocator", "tikv-jemalloc-ctl", "tikv-jemalloc-sys"]
extensions-healthcheck = []

# Enables kubernetes dependencies and shared code. Kubernetes-related sources,
# transforms and sinks should depend on this feature.
kubernetes = ["k8s-openapi", "kube"]

# Misc
sources-utils-tcp-keepalive = []
sources-utils-tcp-socket = []
tls-utils = []

bench = [
    "sinks-loki",
    "sources-haproxy",
    "sources-node_metrics",
]

# Enables `rdkafka` dependency.
# This feature is more portable, but requires `cmake` as build dependency. Use it if `rdkafka-plain` doesn't work.
# The `sasl` feature has to be added because of the limitations of `librdkafka` build scripts for `cmake`.
rdkafka-cmake = ["rdkafka", "rdkafka/cmake_build"]

# Enables features that work only on systems providing `cfg(unix)`
unix = []

[[bench]]
name = "loki"
harness = false
path = "benches/loki.rs"

[[bench]]
name = "hwmon_gather"
harness = false
path = "benches/node_source_hwmon.rs"

[[bench]]
name = "haproxy"
harness = false
path = "benches/haproxy.rs"

[[bench]]
name = "attributes"
harness = false
path = "benches/attributes.rs"

[target.'cfg(unix)'.dependencies]
atty = "0.2.14"
nix = ">=0.22.2"

[build-dependencies]
prost-build = { version = "0.11.1" }

[dev-dependencies]
assert_cmd = { version = "2.0.2" }
base64 = { version = "0.13.0" }
criterion = { version = "0.3.6", default-features = false, features = ["async_tokio"] }
env-test-util = { version = "1.0.1" }
framework = { path = "lib/framework", features = ["test-util"] }
indoc = { version = "1.0.7", default-features = false }
pretty_assertions = { version = "1.3.0" }
proptest = { version = "1.0.0" }
rand = { version = "0.8.5" }
serde_path_to_error = { version = "0.1.8" }
tempfile = { version = "3.2.0" }
testcontainers = { version = "0.14.0" }
testify = { path = "lib/testify" }
tokio = { version = "1.20.1", features = ["test-util"] }
tokio-test = { version = "0.4.2" }
tower-test = { version = "0.4.0" }

[dependencies]
# Workspaces
buffers = { path = "lib/buffers" }
codecs = { path = "lib/codecs" }
condition = { path = "lib/condition", optional = true }
event = { path = "lib/event" }
framework = { path = "lib/framework" }
humanize = { path = "lib/humanize" }
jaeger = { path = "lib/jaeger", optional = true }
log_schema = { path = "lib/log_schema" }
lookup = { path = "lib/lookup" }
multiline = { path = "lib/multiline", optional = true }
prometheus = { path = "lib/prometheus", optional = true }
shared = { path = "lib/shared" }
sysinfo = { path = "lib/sysinfo" }
tail = { path = "lib/tail", optional = true }
virt = { path = "lib/virt", optional = true }
metrics = { path = "lib/metrics" }

# Allocation
mimalloc = { version = "0.1.29", default-features = false, optional = true }
tikv-jemallocator = { version = "0.5.0", optional = true, features = ["stats", "unprefixed_malloc_on_supported_platforms"] }
tikv-jemalloc-ctl = { version = "0.5.0", optional = true }
tikv-jemalloc-sys = { version = "0.5.0", optional = true, features = ["stats"] }

# Futrures & Tokio
tokio = { version = "1.20.1", features = ["time", "net", "signal", "fs", "rt-multi-thread", "io-util", "process"] }
tokio-stream = { version = "0.1.9", features = ["time", "net"] }
tokio-util = { version = "0.7.3", default-features = false, features = ["codec", "time", "net"] }
bytes = { version = "1.2.1", default-features = false, features = ["serde"] }
futures = { version = "0.3.24", default-features = false }
futures-util = { version = "0.3.23", default-features = false }
async-trait = { version = "0.1.57" }
pin-project = { version = "1.0.12" }
stream-cancel = { version = "0.8.1" }

# Tracing
tracing = { version = "0.1.36", default-features = false }
tracing-log = { version = "0.1.3", default-features = false }
tracing-subscriber = { version = "0.3.15", optional = true, default-features = false, features = ["std", "registry"] }
tracing-core = { version = "0.1.29" }

# HTTP
hyper = { version = "0.14.20", features = ["client", "runtime", "http1", "http2", "server", "stream"] }
http = { version = "0.2.8", default-features = false }
headers = { version = "0.3.7" }

# Tower
tower = { version = "0.4.13", default-features = false, features = ["buffer", "limit", "retry", "timeout", "util"] }

# Serde
serde = { version = "1.0.144", default-features = false, features = ["derive"] }
serde_yaml = { version = "0.8.26" }
serde_json = { version = "1.0.85", default-features = false }
serde-xml-rs = { version = "0.6", default-features = false, optional = true }

# Netlink
netlink-sys = { version = "0.8.3", features = ["tokio_socket"], optional = true }
netlink-packet-sock-diag = { version = "0.4.0", optional = true }

# Protobuf
prost = { version = "0.11.0", default-features = false, features = ["std"] }
prost-types = { version = "0.11.1", default-features = false }

# TLS
openssl-probe = { version = "0.1.5", default-features = false }

# Profile
pprof = { version = "0.9.1", default-features = false, optional = true, features = ["flamegraph", "protobuf", "backtrace-rs"] }

# Cli
argh = { version = "0.1.8" }
colored = { version = "2.0.0", default-features = false }

# External libs
ahash = { version = "0.8.0", optional = true }
async-stream = { version = "0.3.3", optional = true }
bloom = { version = "0.3.2", default-features = false, optional = true }
chrono = { version = "0.4.22", features = ["serde"] }
chrono-tz = { version = "0.6.3", features = ["serde"] }
dyn-clone = { version = "1.0.9" }
encoding_rs = { version = "0.8.31", optional = true, features = ["serde"] }
evmap = { version = "10.0.2", default-features = false, optional = true }
exitcode = { version = "1.1.2" }
flate2 = { version = "1.0.24", optional = true }
glob = { version = "0.3.0" }
governor = { version = "0.4.2", default-features = false, optional = true, features = ["dashmap", "jitter", "std"] }
indexmap = { version = "1.9.1", default-features = false, features = ["serde"] }
inventory = { version = "0.3.1" }
k8s-openapi = { version = "0.15.0", default-features = false, optional = true, features = ["api", "v1_18"] }
kube = { version = "0.74.0", default-features = false, optional = true, features = ["client", "native-tls", "runtime"] }
libc = { version = "0.2.132", optional = true }
lru = { version = "0.7.8", default-features = false, optional = true }
maxminddb = { version = "0.23.0", default-features = false, optional = true }
memchr = { version = "2.5.0", optional = true, default-features = false }
# mongodb = { version = "2.1.0", default-features = false, optional = true, features = ["tokio-runtime"] }
nom = { version = "7.1.1", default-features = false }
once_cell = { version = "1.14.0" }
# pulsar = { version = "4.1.1", default-features = false, optional = true, features = ["tokio-runtime", "compression"] }
parking_lot = { version = "0.12.1", optional = true }
percent-encoding = { version = "2.1.0", default-features = false }
rdkafka = { version = "0.28.0", default-features = false, optional = true, features = ["tokio", "zstd", "libz"] }
redis = { version = "0.21.4", default-features = false, optional = true, features = ["tokio-comp", "connection-manager"] }
regex = { version = "1.6.0" }
rsntp = { version = "3.0.1", default-features = false, features = ["tokio"], optional = true }
seahash = { version = "4.1.0", default-features = false, optional = true }
smallvec = { version = "1.9.0", optional = true, features = ["union"] }
snap = { version = "1.0.5", default-features = false, optional = true }
strip-ansi-escapes = { version = "0.1.1", default-features = false }
sqlx = { version = "0.6.1", default-features = false, optional = true, features = ["mysql", "runtime-tokio-rustls", "macros"] }
thiserror = { version = "1.0.33" }
tonic = { version = "0.8.0", optional = true }
typetag = { version = "0.2.3" }
url = { version = "2.2.2", features = ["serde"] }
