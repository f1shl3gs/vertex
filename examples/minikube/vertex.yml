apiVersion: v1
kind: ServiceAccount
metadata:
  name: vertex
  namespace: default

---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: vertex
  namespace: default
rules:
  - verbs:
      - get
      - list
      - watch
    resources:
      - pods
    apiGroups:
      - ""

---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: vertex
  namespace: default
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: vertex
subjects:
  - kind: ServiceAccount
    name: vertex
    namespace: default

---
apiVersion: v1
kind: ConfigMap
metadata:
  name: vertex
  namespace: default
data:
  config: |
    sources:
      node:
        type: node_metrics
      k8s_logs:
        type: kubernetes_logs
        self_node_name: NODE_NAME
      selfstat:
        type: selfstat
      internal:
        type: internal_metrics
      jaeger:
        type: jaeger
        protocols:
          thrift_compact:
            max_packet_size: 65000
    sinks:
      prom:
        type: prometheus_exporter
        inputs:
          - node
          - internal
          - selfstat
      loki:
        type: loki
        inputs:
          - k8s_logs
        endpoint: http://${LOKI_SERVICE_HOST}:3100
        encoding:
          codec: text
      jaeger_sink:
        type: jaeger
        inputs:
          - jaeger
        protocol: udp
        address: ${JAEGER_SERVICE_HOST}:6831

---
apiVersion: apps/v1
kind: DaemonSet
metadata:
  name: vertex
  namespace: default
  labels:
    k8s-app: vertex
spec:
  selector:
    matchLabels:
      name: vertex
  template:
    metadata:
      labels:
        name: vertex
    spec:
      serviceAccountName: vertex
      hostPID: true
      hostNetwork: true
      tolerations:
        # this toleration is to have the daemonset runnable on master nodes
        # remove it if your masters can't run pods
        - key: node-role.kubernetes.io/master
          operator: Exists
          effect: NoSchedule
      containers:
        - name: vertex
          image: vertex:test
          # The test image is loaded by minikube, `Never` will prevent kubelet to pull
          # it from registry.
          imagePullPolicy: Never
          args:
            - "-w" # watch config and reload
          env:
            - name: NODE_NAME
              valueFrom:
                fieldRef:
                  fieldPath: spec.nodeName
          ports:
            - containerPort: 9100
              protocol: TCP
              name: prom
          resources:
            limits:
              memory: 200Mi
            requests:
              cpu: 100m
              memory: 200Mi
          volumeMounts:
            - name: proc
              mountPath: /proc
              readOnly: true
            - name: sys
              mountPath: /sys
              readOnly: true
            - name: varlog
              mountPath: /var/log
            - name: varlibdockercontainers
              mountPath: /var/lib/docker/containers
              readOnly: true
            - name: config
              mountPath: "/etc/vertex"
              readOnly: true
            - name: data
              mountPath: /var/lib/vertex
      terminationGracePeriodSeconds: 30
      volumes:
        - name: proc
          hostPath:
            path: /proc
        - name: sys
          hostPath:
            path: /sys
        - name: varlog
          hostPath:
            path: /var/log
        - name: varlibdockercontainers
          hostPath:
            path: /var/lib/docker/containers
        - name: data
          hostPath:
            path: /tmp/vertex
        - name: config
          configMap:
            name: vertex
            items:
              - key: config
                path: vertex.yml
