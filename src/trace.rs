use std::sync::{Mutex, MutexGuard};

use tokio::sync::broadcast::{self, Receiver, Sender};
use event::LogRecord;
use once_cell::sync::OnceCell;
use tracing::{info, warn, error, dispatcher::{set_global_default}, Dispatch};
use tracing_log::LogTracer;
use tracing_subscriber::layer::SubscriberExt;


/// BUFFER contains all of the internal log events generated by Vertex before
/// the topology has been initialized. It will be cleared (set to `None`) by
/// the topology initialization routines.
static BUFFER: OnceCell<Mutex<Option<Vec<LogRecord>>>> = OnceCell::new();

/// SENDER holds the sender/receiver handle that will received a copy of all the
/// internal log events *after* the topology has been initialized
static SENDER: OnceCell<Sender<LogRecord>> = OnceCell::new();

pub struct TraceSubscription {
    pub buffer: Vec<LogRecord>,
    pub receiver: Receiver<LogRecord>,
}

pub fn subscribe() -> TraceSubscription {
    let buffer = match early_buffer().as_mut() {
        Some(buffer) => buffer.drain(..).collect(),
        None => vec![]
    };

    let receiver = SENDER.get_or_init(|| broadcast::channel(100).0).subscribe();
    TraceSubscription { buffer, receiver }
}

fn early_buffer() -> MutexGuard<'static, Option<Vec<LogRecord>>> {
    BUFFER.get()
        .expect("Internal logs buffer not initialized")
        .lock()
        .expect("Couldn't acquire lock on internal logs buffer")
}

#[cfg(test)]
pub fn reset_early_buffer() {
    *early_buffer() = Some(vec![])
}

pub fn init(color: bool, json: bool, levels: &str) {
    // An escape hatch to disable injecting a metrics layer into tracing.
    // May be used for performance reasons. This is a hidden and undocumented functionality.
    let metrics_layer_enabled = !matches!(
        std::env::var("DISABLE_INTERNAL_METRICS_TRACING_INTEGRATION"),
        Ok(x) if x == "true"
    );

    #[cfg(feature = "tokio-console")]
        let subscriber = {
        let (tasks_layer, tasks_server) = console_subscriber::TasksLayer::new();
        tokio::spawn(tasks_server.serve());

        tracing_subscriber::registry::Registry::default()
            .with(tasks_layer)
            .with(tracing_subscriber::filter::EnvFilter::from(levels))
    };

    #[cfg(not(feature = "tokio-console"))]
        let subscriber = tracing_subscriber::registry::Registry::default()
        .with(tracing_subscriber::filter::EnvFilter::from(levels));

    // dev note: we attempted to refactor to reduce duplication but it was starting to seem like
    // the refactored code would be introducting more complexity than it was worth to remove this
    // bit of duplication as we started to create a generic struct to wrap the formatters that
    // also implement `Layer`
    let dispatch = if json {
        #[cfg(not(test))]
            let formatter = tracing_subscriber::fmt::Layer::default()
            .json()
            .flatten_event(true);

        #[cfg(test)]
            let formatter = tracing_subscriber::fmt::Layer::default()
            .json()
            .flatten_event(true)
            .with_test_writer(); // ensures output is captured

        // TODO: rate limit
        let s = subscriber.with(formatter);
        Dispatch::new(s)
    } else {
        #[cfg(not(test))]
            let formatter = tracing_subscriber::fmt::Layer::default()
            .with_ansi(color)
            .with_writer(std::io::stderr);

        #[cfg(test)]
            let formatter = tracing_subscriber::fmt::Layer::default()
            .with_ansi(color)
            .with_test_writer(); // ensures output is captured

        // TODO: rate limit

        let s = subscriber.with(formatter);
        Dispatch::new(s)
    };

    let _ = LogTracer::init().expect("init log tracer failed");
    let _ = set_global_default(dispatch);
}

pub fn stop_buffering() {
    *early_buffer() = None;
}