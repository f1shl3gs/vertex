mod file;
mod http;

use async_trait::async_trait;

use super::builder::Builder;
use super::{ExampleError, GenerateConfig};
use crate::signal;

#[async_trait]
#[typetag::serde(tag = "type")]
pub trait ProviderConfig: core::fmt::Debug + Send + Sync + dyn_clone::DynClone {
    /// Builds a provider, returning a string containing the config. It's passed
    /// a signals channel to control reloading and shutdown, as applicable.
    async fn build(
        &mut self,
        signal_handler: &mut signal::SignalHandler,
    ) -> Result<Builder, Vec<String>>;

    fn provider_type(&self) -> &'static str;
}

dyn_clone::clone_trait_object!(ProviderConfig);

/// Describes a provider plugin storing its type name and an optional example config
pub struct ProviderDescription {
    pub type_str: &'static str,
    example: fn() -> String,
}

impl ProviderDescription
where
    inventory::iter<ProviderDescription>: IntoIterator<Item = &'static ProviderDescription>,
{
    /// Creates a new provider plugin description.
    /// Configuration example is generated by the `GenerateConfig` trait.
    pub const fn new<B: GenerateConfig>(type_str: &'static str) -> Self {
        Self {
            type_str,
            example: B::generate_config,
        }
    }

    /// Returns an example config for a plugin identified by its type
    pub fn example(type_str: &str) -> Result<String, ExampleError> {
        inventory::iter::<ProviderDescription>
            .into_iter()
            .find(|t| t.type_str == type_str)
            .ok_or_else(|| ExampleError::DoesNotExist(type_str.to_owned()))
            .map(|t| (t.example)())
    }
}

inventory::collect!(ProviderDescription);
