use std::marker::PhantomData;

use thiserror::Error;

fn with_prefix(prefix: &str, content: &str) -> String {
    content
        .trim()
        .lines()
        .map(|line| format!("{}{}", prefix, line))
        .collect::<Vec<_>>()
        .join("\n")
}

pub trait GenerateConfig {
    fn generate_config() -> String;

    fn generate_config_with_indent(n: usize) -> String {
        let prefix = " ".repeat(n);

        with_prefix(&prefix, &Self::generate_config())
    }

    fn generate_commented() -> String {
        with_prefix("# ", &Self::generate_config())
    }

    fn generate_commented_with_indent(indent: usize) -> String {
        let prefix = std::iter::once('#')
            .chain(std::iter::repeat(' ').take(indent))
            .collect::<String>();

        with_prefix(&prefix, &Self::generate_config())
    }
}

#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Debug, Error, Clone, PartialEq)]
pub enum ExampleError {
    #[error("unable to create an example for this component")]
    MissingExample,
    #[error("type '{0}' does not exist")]
    DoesNotExist(String),
}

/// Describes a component plugin storing its type name, an example config,
/// and other useful information about the plugin
pub struct ComponentDescription<T: Sized> {
    pub type_str: &'static str,
    example: fn() -> Option<String>,
    component_type: PhantomData<T>,
}

impl<T> ComponentDescription<T>
where
    T: 'static + Sized,
    inventory::iter<ComponentDescription<T>>: IntoIterator<Item = &'static ComponentDescription<T>>,
{
    /// Creates a new component plugin description.
    /// Configuration example is generated by the `GenerateConfig` trait.
    pub const fn new<B: GenerateConfig>(type_str: &'static str) -> Self {
        Self {
            type_str,
            example: || Some(B::generate_config()),
            component_type: PhantomData,
        }
    }

    /// Returns an example config for a plugin identified by tis type
    pub fn example(type_str: &str) -> Result<String, ExampleError> {
        inventory::iter::<ComponentDescription<T>>
            .into_iter()
            .find(|t| t.type_str == type_str)
            .ok_or_else(|| ExampleError::DoesNotExist(type_str.to_string()))
            .and_then(|t| (t.example)().ok_or(ExampleError::MissingExample))
    }

    /// Returns a sorted Vec of all plugins registered of a type
    pub fn types() -> Vec<&'static str> {
        let mut types = Vec::new();
        for definition in inventory::iter::<ComponentDescription<T>> {
            types.push(definition.type_str);
        }

        types.sort_unstable();
        types
    }
}
